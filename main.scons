# gnu arm toolchain must be already in system path    

proj_name = 'STMF4RTOS'

import os
env = Environment(ENV = os.environ)

env.Replace(AS="arm-none-eabi-as")
env.Replace(AR="arm-none-eabi-ar")
env.Replace(CC="arm-none-eabi-gcc")
env.Replace(CXX="arm-none-eabi-g++")
env.Replace(LINK="arm-none-eabi-g++")                # predefined is 'arm-none-eabi-gcc'
env.Replace(OBJCOPY="arm-none-eabi-objcopy")
env.Replace(SIZE="arm-none-eabi-size")
env.Replace(PROGSUFFIX=".elf")
env.Replace(RANLIB="arm-none-eabi-ranlib")

# include locations
system_includes = [
    '#Drivers/CMSIS/Device/ST/STM32F4xx/Include',
    '#Drivers/CMSIS/Include',
    ]

middleware_include = [
    '#Middlewares/Third_Party/FreeRTOS/Source/include',
    '#Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS',
    '#Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F',
    '#Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang',
    '#Middlewares/ST/STM32_USB_Host_Library/Class/CDC/Inc',
    '#Middlewares/ST/STM32_USB_Host_Library/Core/Inc',
    ]

driver_include = [
    '#Drivers/STM32F4xx_HAL_Driver/Inc',
    '#Drivers/STM32F4xx_HAL_Driver/Legacy',
    ]

usb_host_include = [
    '#USB_HOST/App',
    '#USB_HOST/Target',
]

tracerecorderlib_include = [
    '#TraceRecorderLib/include',
]

program_include= [
    '#Core/Inc',
    ]

env['CPPPATH'] = [
    '#Drivers',
    ] + system_includes +usb_host_include  +tracerecorderlib_include+ middleware_include + driver_include + program_include

# uC specific compiler flags
cortex_m4_flags = [
    '-mthumb',
    '-mcpu=cortex-m4',
    '-mfloat-abi=softfp',
    '-mfpu=fpv4-sp-d16',
    ]

# defines
env.Append(CPPDEFINES = [
    'USE_HAL_DRIVER',
    'DEBUG',
    'OS_USE_SEMIHOSTING',
    'OS_USE_TRACE_SEMIHOSTING_STDOUT',
    'STM32F407xx',
])

# for C
env.Append(CFLAGS = [
    '-std=gnu11', 
])

# general C and C++ flags
env.Append(CCFLAGS = [
    '-Os', 
    '-fmessage-length=0',
    '-fsigned-char',
    '-ffunction-sections',
    '-fdata-sections',
    '-Wall',
    '-Wextra',
    '-g',
#   '-MMD', 
#    '-MP'
] + cortex_m4_flags)



# linker flags
env.Append(LINKFLAGS = cortex_m4_flags + [
    '-TSTM32F407VG_FLASH.ld',
    '-specs=nosys.specs',
    '-static',
    '-Wl,--gc-sections',
    '-Wl,--defsym=malloc_getpagesize_P=0x80',
    '-Wl,--start-group',
    '-lc',
    '-lm',
    '-Wl,--end-group',
    '-specs=nano.specs',
    '-Xlinker',
    '--gc-sections',
    '-u _printf_float',
    '-u _scanf_float',
    '-Wl,-Map,"target/%s.map"'%(proj_name),
    ]) 

# support files (possibly can be done as LIB)
system_sources = [
    ]

usb_host_app_sources= Glob('#USB_HOST/App/*.c') 
usb_host_target_sources= Glob('#USB_HOST/Target/*.c') 
tracerecorderlib_sources= Glob('#TraceRecorderLib/*.c') 
middleware_usbclass_source = Glob( '#Middlewares/ST/STM32_USB_Host_Library/Class/CDC/Src/*.c')
middleware_usbcore_source= Glob( '#Middlewares/ST/STM32_USB_Host_Library/Core/Src/*.c')
freertos_cmsis_sources = Glob( '#Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/*.c')
freertos_src_sources = Glob( '#Middlewares/Third_Party/FreeRTOS/Source/*.c')
freertos_pg_sources = Glob( '#Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/*.c')
freertos_mm_sources = Glob( '#Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/*.c')
driver_sources = Glob('#Drivers/STM32F4xx_HAL_Driver/Src/*.c') 
startup_source = Glob('#startup/*.s') 
 
sources = system_sources+tracerecorderlib_sources+ middleware_usbclass_source + middleware_usbcore_source+ usb_host_app_sources+ usb_host_target_sources + freertos_cmsis_sources +freertos_src_sources+ freertos_pg_sources+ freertos_mm_sources  + driver_sources + startup_source

program_sources = Glob('#/Core/Src/*.c')


# build everything
prg = env.Program(
    target = proj_name,
    source = program_sources + sources,
)
 
# binary file builder
# Invoking: Cross ARM GNU Create Flash Image
def arm_generator(source, target, env, for_signature):
    return '$OBJCOPY -O ihex %s %s'%(source[0], target[0])
env.Append(BUILDERS = {
    'Objcopy': Builder(
        generator=arm_generator,
        suffix='.hex',
        src_suffix='.elf'
    )
})

# file size builder
# Invoking: Cross ARM GNU Print Size
def arm_size_generator(source, target, env, for_signature):
    return '$SIZE --format=berkeley %s'%(source[0])
env.Append(BUILDERS = {
    'Size': Builder(
        generator=arm_size_generator,
        src_suffix='.elf'
    )
})

env.Objcopy(prg)
env.Size(prg)
